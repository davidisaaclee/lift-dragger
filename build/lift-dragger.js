(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var checkHit, getBounds;

getBounds = function(element) {
  var clientLeft, clientRect, clientTop, scrollLeft, scrollTop;
  scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
  scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;
  clientTop = document.documentElement.clientTop || document.body.clientTop || 0;
  clientLeft = document.documentElement.clientLeft || document.body.clientLeft || 0;
  clientRect = element.getBoundingClientRect();
  return {
    top: clientRect.top,
    left: clientRect.left,
    width: clientRect.width,
    height: clientRect.height
  };
};

checkHit = function(position, element) {
  var bottom, bounds, isInsideHeight, isInsideWidth, ref, ref1, right;
  bounds = getBounds(element);
  right = bounds.left + bounds.width;
  bottom = bounds.top + bounds.height;
  isInsideWidth = (bounds.left < (ref = position.x) && ref < right);
  isInsideHeight = (bounds.top < (ref1 = position.y) && ref1 < bottom);
  return isInsideHeight && isInsideWidth;
};

Polymer({
  is: 'lift-dragger',
  listeners: {
    'track': '_tracking',
    'up': '_upDown',
    'down': '_upDown'
  },
  ready: function() {
    var c;
    c = this.$.container;
    return this._movement = {
      x: c.offsetLeft,
      y: c.offsetTop
    };
  },
  _boundingRect: function() {
    var clientRect;
    clientRect = this.getBoundingClientRect();
    return {
      left: clientRect.left + window.scrollX,
      top: clientRect.top + window.scrollY
    };
  },
  _upDown: function(event, detail) {
    var c, cursorOffset, delta, scope;
    switch (event.type) {
      case 'up':
        delta = this._getDelta();
        this.fire('drop', {
          delta: delta,
          x: detail.x,
          y: detail.y,
          checkHit: function(element) {
            return checkHit(detail, element);
          }
        });
        this.$.scaler.classList.remove('lifted');
        c = this.$.container;
        this._movement = {
          x: c.offsetLeft,
          y: c.offsetTop
        };
        return this.translate3d(this._movement.x + "px", this._movement.y + "px", "0", this.$.container);
      case 'down':
        this.$.scaler.classList.add('lifted');
        this.fire('lift', {
          x: detail.x,
          y: detail.y
        });
        c = this.$.container;
        scope = this;
        this._origin = {
          x: this._movement.x,
          y: this._movement.y
        };
        this._cursorOffset = cursorOffset = {
          left: detail.x - c.offsetLeft,
          top: detail.y - c.offsetTop
        };
        this._movement = {
          x: detail.x - c.offsetLeft - cursorOffset.left + scope._origin.x,
          y: detail.y - c.offsetTop - cursorOffset.top + scope._origin.y
        };
        return this.translate3d(this._movement.x + "px", this._movement.y + "px", "0", this.$.container);
    }
  },
  _tracking: function(event, detail) {
    var c, cursorOffset, delta, scope;
    switch (detail.state) {
      case 'start':
        return null;
      case 'track':
        scope = this;
        c = this.$.container;
        cursorOffset = this._cursorOffset;
        this._movement = {
          x: detail.x - c.offsetLeft - cursorOffset.left + scope._origin.x,
          y: detail.y - c.offsetTop - cursorOffset.top + scope._origin.y
        };
        this.translate3d(this._movement.x + "px", this._movement.y + "px", "0", this.$.container);
        delta = this._getDelta();
        return this.fire('drag', {
          x: detail.x,
          y: detail.y,
          checkHit: function(element) {
            return checkHit(detail, element);
          }
        });
      case 'end':
        return null;
    }
  },
  _getDelta: function() {
    var delta, mvmt, origin;
    mvmt = this._movement;
    origin = this._origin;
    return delta = {
      x: mvmt.x - origin.x,
      y: mvmt.y - origin.y
    };
  }
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvZGF2aWQvRG9jdW1lbnRzL1dvcmsvbGlmdC1kcmFnZ2VyL3NyYy9saWZ0LWRyYWdnZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQTs7QUFBQSxTQUFBLEdBQVksU0FBQyxPQUFEO0FBQ1YsTUFBQTtFQUFBLFNBQUEsR0FBWSxNQUFNLENBQUMsV0FBUCxJQUNBLFFBQVEsQ0FBQyxlQUFlLENBQUMsU0FEekIsSUFFQSxRQUFRLENBQUMsSUFBSSxDQUFDO0VBQzFCLFVBQUEsR0FBYSxNQUFNLENBQUMsV0FBUCxJQUNBLFFBQVEsQ0FBQyxlQUFlLENBQUMsVUFEekIsSUFFQSxRQUFRLENBQUMsSUFBSSxDQUFDO0VBRzNCLFNBQUEsR0FBWSxRQUFRLENBQUMsZUFBZSxDQUFDLFNBQXpCLElBQ0EsUUFBUSxDQUFDLElBQUksQ0FBQyxTQURkLElBRUE7RUFDWixVQUFBLEdBQWEsUUFBUSxDQUFDLGVBQWUsQ0FBQyxVQUF6QixJQUNBLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFEZCxJQUVBO0VBRWIsVUFBQSxHQUFhLE9BQU8sQ0FBQyxxQkFBUixDQUFBO1NBRWI7SUFBQSxHQUFBLEVBQUssVUFBVSxDQUFDLEdBQWhCO0lBQ0EsSUFBQSxFQUFNLFVBQVUsQ0FBQyxJQURqQjtJQUVBLEtBQUEsRUFBTyxVQUFVLENBQUMsS0FGbEI7SUFHQSxNQUFBLEVBQVEsVUFBVSxDQUFDLE1BSG5COztBQWxCVTs7QUF3QlosUUFBQSxHQUFXLFNBQUMsUUFBRCxFQUFXLE9BQVg7QUFDVCxNQUFBO0VBQUEsTUFBQSxHQUFTLFNBQUEsQ0FBVSxPQUFWO0VBRVQsS0FBQSxHQUFRLE1BQU0sQ0FBQyxJQUFQLEdBQWMsTUFBTSxDQUFDO0VBQzdCLE1BQUEsR0FBUyxNQUFNLENBQUMsR0FBUCxHQUFhLE1BQU0sQ0FBQztF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QSxDQUFDLENBQUMsU0FBL0Q7UUFFQSxLQUFBLEdBQVEsSUFBQyxDQUFBLFNBQUQsQ0FBQTtlQUNSLElBQUMsQ0FBQSxJQUFELENBQU0sTUFBTixFQUNFO1VBQUEsQ0FBQSxFQUFHLE1BQU0sQ0FBQyxDQUFWO1VBQ0EsQ0FBQSxFQUFHLE1BQU0sQ0FBQyxDQURWO1VBRUEsUUFBQSxFQUFVLFNBQUMsT0FBRDttQkFBYSxRQUFBLENBQVMsTUFBVCxFQUFpQixPQUFqQjtVQUFiLENBRlY7U0FERjtBQWRKLFdBbUJPLEtBbkJQO2VBb0JJO0FBcEJKO0VBRlMsQ0FqRVg7RUF5RkEsU0FBQSxFQUFXLFNBQUE7QUFDVCxRQUFBO0lBQUEsSUFBQSxHQUFPLElBQUMsQ0FBQTtJQUNSLE1BQUEsR0FBUyxJQUFDLENBQUE7V0FDVixLQUFBLEdBQ0U7TUFBQSxDQUFBLEVBQUcsSUFBSSxDQUFDLENBQUwsR0FBUyxNQUFNLENBQUMsQ0FBbkI7TUFDQSxDQUFBLEVBQUcsSUFBSSxDQUFDLENBQUwsR0FBUyxNQUFNLENBQUMsQ0FEbkI7O0VBSk8sQ0F6Rlg7Q0FERiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJnZXRCb3VuZHMgPSAoZWxlbWVudCkgLT5cbiAgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8XG4gICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHxcbiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3BcbiAgc2Nyb2xsTGVmdCA9IHdpbmRvdy5wYWdlWE9mZnNldCB8fFxuICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHxcbiAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdFxuXG4gICMgZG9jdW1lbnQgY2FuIFwic2hpZnRcIiBpbiBJRTsgZ2V0IHNoaWZ0eVxuICBjbGllbnRUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50VG9wIHx8XG4gICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xpZW50VG9wIHx8XG4gICAgICAgICAgICAgIDBcbiAgY2xpZW50TGVmdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0IHx8XG4gICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsaWVudExlZnQgfHxcbiAgICAgICAgICAgICAgIDBcblxuICBjbGllbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gIHRvcDogY2xpZW50UmVjdC50b3BcbiAgbGVmdDogY2xpZW50UmVjdC5sZWZ0XG4gIHdpZHRoOiBjbGllbnRSZWN0LndpZHRoXG4gIGhlaWdodDogY2xpZW50UmVjdC5oZWlnaHRcblxuXG5jaGVja0hpdCA9IChwb3NpdGlvbiwgZWxlbWVudCkgLT5cbiAgYm91bmRzID0gZ2V0Qm91bmRzIGVsZW1lbnRcblxuICByaWdodCA9IGJvdW5kcy5sZWZ0ICsgYm91bmRzLndpZHRoXG4gIGJvdHRvbSA9IGJvdW5kcy50b3AgKyBib3VuZHMuaGVpZ2h0XG5cbiAgaXNJbnNpZGVXaWR0aCA9XG4gICAgYm91bmRzLmxlZnQgPCBwb3NpdGlvbi54IDwgcmlnaHRcbiAgaXNJbnNpZGVIZWlnaHQgPVxuICAgIGJvdW5kcy50b3AgPCBwb3NpdGlvbi55IDwgYm90dG9tXG5cbiAgcmV0dXJuIGlzSW5zaWRlSGVpZ2h0IGFuZCBpc0luc2lkZVdpZHRoXG5cblxuUG9seW1lclxuICBpczogJ2xpZnQtZHJhZ2dlcidcblxuXG4gIGxpc3RlbmVyczpcbiAgICAndHJhY2snOiAnX3RyYWNraW5nJ1xuICAgICd1cCc6ICdfdXBEb3duJ1xuICAgICdkb3duJzogJ191cERvd24nXG5cblxuICByZWFkeTogKCkgLT5cbiAgICBjID0gQCQuY29udGFpbmVyXG4gICAgQF9tb3ZlbWVudCA9XG4gICAgICB4OiBjLm9mZnNldExlZnRcbiAgICAgIHk6IGMub2Zmc2V0VG9wXG5cblxuICBfYm91bmRpbmdSZWN0OiAoKSAtPlxuICAgIGNsaWVudFJlY3QgPSBAZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgIGxlZnQ6IGNsaWVudFJlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYXG4gICAgdG9wOiBjbGllbnRSZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZXG5cblxuICBfdXBEb3duOiAoZXZlbnQsIGRldGFpbCkgLT5cbiAgICBzd2l0Y2ggZXZlbnQudHlwZVxuICAgICAgd2hlbiAndXAnXG4gICAgICAgIGRlbHRhID0gQF9nZXREZWx0YSgpXG4gICAgICAgIEBmaXJlICdkcm9wJyxcbiAgICAgICAgICBkZWx0YTogZGVsdGFcbiAgICAgICAgICB4OiBkZXRhaWwueFxuICAgICAgICAgIHk6IGRldGFpbC55XG4gICAgICAgICAgY2hlY2tIaXQ6IChlbGVtZW50KSAtPiBjaGVja0hpdCBkZXRhaWwsIGVsZW1lbnRcblxuICAgICAgICBAJC5zY2FsZXIuY2xhc3NMaXN0LnJlbW92ZSAnbGlmdGVkJ1xuXG4gICAgICAgIGMgPSBAJC5jb250YWluZXJcbiAgICAgICAgQF9tb3ZlbWVudCA9XG4gICAgICAgICAgeDogYy5vZmZzZXRMZWZ0XG4gICAgICAgICAgeTogYy5vZmZzZXRUb3BcbiAgICAgICAgQHRyYW5zbGF0ZTNkIFwiI3tAX21vdmVtZW50Lnh9cHhcIiwgXCIje0BfbW92ZW1lbnQueX1weFwiLCBcIjBcIiwgQCQuY29udGFpbmVyXG4gICAgICB3aGVuICdkb3duJ1xuICAgICAgICBAJC5zY2FsZXIuY2xhc3NMaXN0LmFkZCAnbGlmdGVkJ1xuXG4gICAgICAgIEBmaXJlICdsaWZ0JyxcbiAgICAgICAgICB4OiBkZXRhaWwueFxuICAgICAgICAgIHk6IGRldGFpbC55XG5cbiAgICAgICAgYyA9IEAkLmNvbnRhaW5lclxuICAgICAgICBzY29wZSA9IHRoaXNcblxuICAgICAgICBAX29yaWdpbiA9XG4gICAgICAgICAgeDogQF9tb3ZlbWVudC54XG4gICAgICAgICAgeTogQF9tb3ZlbWVudC55XG5cbiAgICAgICAgQF9jdXJzb3JPZmZzZXQgPSBjdXJzb3JPZmZzZXQgPVxuICAgICAgICAgIGxlZnQ6IGRldGFpbC54IC0gYy5vZmZzZXRMZWZ0XG4gICAgICAgICAgdG9wOiBkZXRhaWwueSAtIGMub2Zmc2V0VG9wXG5cbiAgICAgICAgQF9tb3ZlbWVudCA9XG4gICAgICAgICAgeDogZGV0YWlsLnggLSBjLm9mZnNldExlZnQgLSBjdXJzb3JPZmZzZXQubGVmdCArIHNjb3BlLl9vcmlnaW4ueFxuICAgICAgICAgIHk6IGRldGFpbC55IC0gYy5vZmZzZXRUb3AgLSBjdXJzb3JPZmZzZXQudG9wICsgc2NvcGUuX29yaWdpbi55XG5cbiAgICAgICAgQHRyYW5zbGF0ZTNkIFwiI3tAX21vdmVtZW50Lnh9cHhcIiwgXCIje0BfbW92ZW1lbnQueX1weFwiLCBcIjBcIiwgQCQuY29udGFpbmVyXG5cblxuICBfdHJhY2tpbmc6IChldmVudCwgZGV0YWlsKSAtPlxuXG4gICAgc3dpdGNoIGRldGFpbC5zdGF0ZVxuICAgICAgd2hlbiAnc3RhcnQnXG4gICAgICAgIG51bGxcbiAgICAgIHdoZW4gJ3RyYWNrJ1xuICAgICAgICBzY29wZSA9IHRoaXNcbiAgICAgICAgYyA9IEAkLmNvbnRhaW5lclxuICAgICAgICBjdXJzb3JPZmZzZXQgPSBAX2N1cnNvck9mZnNldFxuICAgICAgICBAX21vdmVtZW50ID1cbiAgICAgICAgICB4OiBkZXRhaWwueCAtIGMub2Zmc2V0TGVmdCAtIGN1cnNvck9mZnNldC5sZWZ0ICsgc2NvcGUuX29yaWdpbi54XG4gICAgICAgICAgeTogZGV0YWlsLnkgLSBjLm9mZnNldFRvcCAtIGN1cnNvck9mZnNldC50b3AgKyBzY29wZS5fb3JpZ2luLnlcblxuICAgICAgICBAdHJhbnNsYXRlM2QgXCIje0BfbW92ZW1lbnQueH1weFwiLCBcIiN7QF9tb3ZlbWVudC55fXB4XCIsIFwiMFwiLCBAJC5jb250YWluZXJcblxuICAgICAgICBkZWx0YSA9IEBfZ2V0RGVsdGEoKVxuICAgICAgICBAZmlyZSAnZHJhZycsXG4gICAgICAgICAgeDogZGV0YWlsLnhcbiAgICAgICAgICB5OiBkZXRhaWwueVxuICAgICAgICAgIGNoZWNrSGl0OiAoZWxlbWVudCkgLT4gY2hlY2tIaXQgZGV0YWlsLCBlbGVtZW50XG5cbiAgICAgIHdoZW4gJ2VuZCdcbiAgICAgICAgbnVsbFxuXG4gIF9nZXREZWx0YTogKCkgLT5cbiAgICBtdm10ID0gQF9tb3ZlbWVudFxuICAgIG9yaWdpbiA9IEBfb3JpZ2luXG4gICAgZGVsdGEgPVxuICAgICAgeDogbXZtdC54IC0gb3JpZ2luLnhcbiAgICAgIHk6IG12bXQueSAtIG9yaWdpbi55Il19
